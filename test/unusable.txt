     
     INDEX.HTML
      <!--
        scoreboard !working
      <div class="col s3">
        <div class="card light-green lighten-4">
          <div class="card-content black-text">
            <h6>Star Commodity Prediction</h6>
            <span class="card-title" id="time">{{context.sixmonths[0][0]}}</span>
            <table class="valign-wrapper">
              <tr>
                <td>
                  <h5 id="crop1">{{context.sixmonths[0][1]}}</h5>
                </td>
                <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td class="right">
                  <h4 id="price1">₹{{context.sixmonths[0][2]}}</h4>
                  <p id="pos-change" class="valign-wrapper right">{{context.sixmonths[0][3]}}%</p><img id="change1"
                    src="../static/gain-icon.png" height="20" width="20" style="{margin-left: 5;}">
                </td>

              </tr>
              <tr>
                <td>
                  <h5 id="crop2">{{context.sixmonths[0][4]}}</h5>
                </td>
                <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                <td class="right">
                  <h4 id="price2">₹{{context.sixmonths[0][5]}}</h4>
                  <p id="neg-change" class="valign-wrapper right">{{context.sixmonths[0][6]}}%</p><img id="change2"
                    src="../static/loss-icon.png" height="20" width="20" style="{margin-left: 5;}">
                </td>
              </tr>
            </table>
            <script>
              function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
              }
              function updateTime(i) {
                $('#time').load('http://localhost:5000/ticker/' + 0 + '/' + i);
              }

              function updateCrop1(i) {
                $('#crop1').load('http://localhost:5000/ticker/' + 1 + '/' + i);
              }

              function updatePrice1(i) {
                $('#price1').load('http://localhost:5000/ticker/' + 2 + '/' + i);
              }

              function updateChange1(i) {
                $("#change1").attr("src", "../static/gain-icon.png");
                $('#pos-change').load('http://localhost:5000/ticker/' + 3 + '/' + i);

              }

              function updateCrop2(i) {
                $('#crop2').load('http://localhost:5000/ticker/' + 4 + '/' + i);
              }

              function updatePrice2(i) {
                $('#price2').load('http://localhost:5000/ticker/' + 5 + '/' + i);
              }

              function updateChange2(i) {
                $("#change2").attr("src", "../static/loss-icon.png");
                $('#neg-change').load('http://localhost:5000/ticker/' + 6 + '/' + i);

              }
            </script>

            <script>
              var i = 0
              setInterval(async function () {
                i = (i + 1) % 5;
                updateTime(i);

                updateCrop1(i);
                await sleep(200);

                updatePrice1(i);
                await sleep(200);

                updateChange1(i);
                await sleep(200);

                updateCrop2(i);
                await sleep(200);

                updatePrice2(i);
                await sleep(200);

                updateChange2(i);
                await sleep(200);

                /*
                setTimeout(updateCrop1(i), 100);
                setTimeout(updatePrice1(i), 300);
                setTimeout(updateChange1(i), 500);
                setTimeout(updateCrop2(i), 700);
                setTimeout(updatePrice2(i), 800);
                setTimeout(updateChange2(i), 900);
                */

              }, 4000);

            </script>

          </div>
        </div>

      </div>
      -->











      __________________________________


      app.py contents


      
""" def SixMonthsForecast():
    month1=[]
    month2=[]
    month3=[]
    month4=[]
    month5=[]
    month6=[]
    for i in commodity_list:
        crop=SixMonthsForecastHelper(i.getCropName())
        k=0
        for j in crop:
            time = j[0]
            price = j[1]
            change = j[2]
            if k==0:
                month1.append((price,change,i.getCropName().split("/")[1],time))
            elif k==1:
                month2.append((price,change,i.getCropName().split("/")[1],time))
            elif k==2:
                month3.append((price,change,i.getCropName().split("/")[1],time))
            elif k==3:
                month4.append((price,change,i.getCropName().split("/")[1],time))
            elif k==4:
                month5.append((price,change,i.getCropName().split("/")[1],time))
            elif k==5:
                month6.append((price,change,i.getCropName().split("/")[1],time))
            k+=1
    month1.sort()
    month2.sort()
    month3.sort()
    month4.sort()
    month5.sort()
    month6.sort()
    crop_month_wise=[]
    crop_month_wise.append([month1[0][3],month1[len(month1)-1][2],month1[len(month1)-1][0],month1[len(month1)-1][1],month1[0][2],month1[0][0],month1[0][1]])
    crop_month_wise.append([month2[0][3],month2[len(month2)-1][2],month2[len(month2)-1][0],month2[len(month2)-1][1],month2[0][2],month2[0][0],month2[0][1]])
    crop_month_wise.append([month3[0][3],month3[len(month3)-1][2],month3[len(month3)-1][0],month3[len(month3)-1][1],month3[0][2],month3[0][0],month3[0][1]])
    crop_month_wise.append([month4[0][3],month4[len(month4)-1][2],month4[len(month4)-1][0],month4[len(month4)-1][1],month4[0][2],month4[0][0],month4[0][1]])
    crop_month_wise.append([month5[0][3],month5[len(month5)-1][2],month5[len(month5)-1][0],month5[len(month5)-1][1],month5[0][2],month5[0][0],month5[0][1]])
    crop_month_wise.append([month6[0][3],month6[len(month6)-1][2],month6[len(month6)-1][0],month6[len(month6)-1][1],month6[0][2],month6[0][0],month6[0][1]])

   # print(crop_month_wise)
    return crop_month_wise """

""" def SixMonthsForecastHelper(name):
    current_month = datetime.now().month
    current_year = datetime.now().year
    current_rainfall = annual_rainfall[current_month - 1]
    name = name.split("/")[1]
    name = name.lower()
    commodity = commodity_list[0]
    for i in commodity_list:
        if name == str(i):
            commodity = i
            break
    month_with_year = []
    for i in range(1, 7):
        if current_month + i <= 12:
            month_with_year.append((current_month + i, current_year, annual_rainfall[current_month + i - 1]))
        else:
            month_with_year.append((current_month + i - 12, current_year + 1, annual_rainfall[current_month + i - 13]))
    wpis = []
    current_wpi = commodity.getPredictedValue([float(current_month), current_year, current_rainfall])
    change = []

    for m, y, r in month_with_year:
        current_predict = commodity.getPredictedValue([float(m), y, r])
        wpis.append(current_predict)
        change.append(((current_predict - current_wpi) * 100) / current_wpi)

    crop_price = []
    for i in range(0, len(wpis)):
        m, y, r = month_with_year[i]
        x = datetime(y, m, 1)
        x = x.strftime("%b %y")
        crop_price.append([x, round((wpis[i]* base[name.capitalize()]) / 100, 2) , round(change[i], 2)])

   # print("Crop_Price: ", crop_price)
    return crop_price """